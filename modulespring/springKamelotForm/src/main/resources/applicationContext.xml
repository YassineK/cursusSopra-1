<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
          http://www.springframework.org/schema/aop 
            http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
          http://www.springframework.org/schema/util
            http://www.springframework.org/schema/util/spring-util-4.0.xsd
            http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-4.0.xsd
			http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
           http://www.springframework.org/schema/mvc
			http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd"
			default-autowire="byName">

<bean id="quete1" class="com.courtalon.springKamelotForm.beans.QueteBasique">
	<constructor-arg index="0" value="compter les pierres du chateau" />
	<constructor-arg index="1" value="0.3" />
</bean>

<bean id="quete2" class="com.courtalon.springKamelotForm.beans.QueteBasique">
	<constructor-arg index="0" value="faire un tour de garde" />
	<constructor-arg index="1" value="0.2" />
</bean>

<bean id="quete3" class="com.courtalon.springKamelotForm.beans.QueteBasique">
	<constructor-arg index="0" value="nettoyer les ecuries" />
	<constructor-arg index="1" value="0.4" />
</bean>

<bean id="jacquouille" class="com.courtalon.springKamelotForm.beans.ChevalierBasique">
	<constructor-arg index="0" value="jacquouille"/>
	<property name="reussite" value="0.6" />
	<property name="quete" ref="quete2" />
</bean>

<bean id="pierrot" class="com.courtalon.springKamelotForm.beans.ChevalierBasique">
	<constructor-arg index="0" value="pierrot"/>
	<property name="reussite" value="0.5" />
	<property name="quete" ref="quete1" />
</bean>

<bean id="merlin" class="com.courtalon.springKamelotForm.beans.Magicien">
	<property name="sujets">
		<list>
			<value>dame du lac</value>
			<value>graal</value>
			<value>chevalier noir</value>
			<value>princesse lambda</value>
			<value>tresor des druides</value>
			<value>dragon</value>
		</list>
	</property>
	<property name="actions">
		<list>
			<value>sauver</value>
			<value>trucider</value>
			<value>rapporter</value>
			<value>escorter</value>
			<value>purifier</value>
		</list>
	</property>
</bean>

<!-- scope prototype indique a spring de fournir une nouvelle
 instance a chaque injection différente
 par defaut (si on indique rien), on est en scope singleton -->
<bean id="cheval1" 
	  class="com.courtalon.springKamelotForm.beans.Cheval"
	  scope="prototype"
	  lazy-init="true">
	<constructor-arg value="tornado"/>
</bean>

<!--  init-method permet d'indiquer une méthode a appeler
après construction et injection des dépendances dans notre objet
mais AVANT qu'il ne soit injecté ailleur -->
<bean id="cheval2"
	  class="com.courtalon.springKamelotForm.beans.Cheval"
	  scope="prototype"
	  lazy-init="true"
	  init-method="preparer">
	<constructor-arg value="bourriquet"/>
</bean>


<bean id="caradoc" class="com.courtalon.springKamelotForm.beans.ChevalierTableRonde">
	<constructor-arg index="0" value="Caradoc" />
	<property name="cheval" ref="cheval2" />
	<property name="reussite" value="0.5"/>
	<property name="quete">
		<bean class="com.courtalon.springKamelotForm.beans.QueteEpique"
			  factory-bean="merlin"
			  factory-method="fournirQuete" />
	</property>
</bean>

<bean id="perceval"
	 class="com.courtalon.springKamelotForm.beans.ChevalierTableRonde"
	 lazy-init="true">
	<constructor-arg index="0" value="Perceval" />
	<property name="cheval" ref="cheval2" />
	<property name="reussite" value="0.6"/>
	<property name="quete">
		<bean class="com.courtalon.springKamelotForm.beans.QueteEpique"
			  factory-bean="merlin"
			  factory-method="fournirQuete" />
	</property>
</bean>

<bean id="assurancetourix" class="com.courtalon.springKamelotForm.beans.Menestrel" />
<!-- ici, toute notre configuration de l'AOP -->
<aop:config>

	<aop:aspect ref="assurancetourix">
<!--
 execution : (on vise l'execution d'une methode)
(* : on prend la méthode quelque soit son type de retour
com.courtalon.springKamelotForm.beans.Chevalier* : je vise toutes les classes qui matche ce nom
.partir* : je vise les methodes partir*  (partirEnQuete, partirATaverne...)
(..)) : qui accepte n'importe quel liste de parametre (toutes les methodes)
and target(bean) : on veut transmettre le bean "intercepté" au conseiller (le menestrel)
-->
		<aop:pointcut 
expression="execution(* com.courtalon.springKamelotForm.beans.Chevalier*.partir*(..)) and target(bean)"
id="allKnight"/>
		<aop:pointcut 
expression="execution(* com.courtalon.springKamelotForm.beans.ChevalierTableRonde.partir*(..)) and target(bean)"
id="roundTableKnight"/>

	<aop:before method="chanterAvant" pointcut-ref="allKnight" arg-names="bean"/>
	<aop:after-returning method="chanterApres" pointcut-ref="roundTableKnight" arg-names="bean"/>
	</aop:aspect>
</aop:config>

</beans>
